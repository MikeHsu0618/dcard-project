name: Go

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Fetch required Go modules
        run: go clean --modcache

      - name: Fetch required Go modules
        run: go mod download

      - name: Build
        run: go build ./cmd/app/main.go

#      - name: Test
#        run: go test -v ./test

  deploy_docker:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags')
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Create env file
        run: |
          touch .env
          echo ${{ secrets.ENV_VALUE }} >> .env
      -
        name: Build and push
        uses: docker/build-push-action@v2.9.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest

  deploy_aws:
    needs: deploy_docker
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Deploy in EC2
        env:
          PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
          AWS_HOST_NAME : ${{ secrets.AWS_HOST_NAME  }}
          AWS_USER_NAME : ${{ secrets.AWS_USER_NAME  }}
          PROJECT_NAME : ${{ secrets.PROJECT_NAME }}
          DOCKER_USER_NAME : ${{ secrets.DOCKER_USER_NAME }}
          DOCKER_REPO_NAME : ${{ secrets.DOCKER_REPO_NAME }}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key &&
          ssh -o StrictHostKeyChecking=no -i private_key ${AWS_USER_NAME}@${AWS_HOST_NAME} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            cd /home/ec2-user &&
            docker stop ${{ secrets.PROJECT_NAME }} &&
            docker container prune -f &&
            docker rmi -f ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest &&
            docker pull ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest &&
            docker run --restart always -p 80:8080 --name ${{ secrets.PROJECT_NAME }} --network dcard-project_fullstack -d ${{ secrets.DOCKER_USER_NAME }}/${{ secrets.DOCKER_REPO_NAME }}:latest
          '